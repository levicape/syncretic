import{_ as s,c as t,o as a,ae as e}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"Fourtwo - Configuring the JSX transformer","titleTemplate":":title","description":"","frontmatter":{"title":"Fourtwo - Configuring the JSX transformer","titleTemplate":":title"},"headers":[],"relativePath":"docs/01-getting-started/02-configure-jsx-with-typescript.md","filePath":"docs/01-getting-started/02-configure-jsx-with-typescript.md","lastUpdated":1747085892000}'),n={name:"docs/01-getting-started/02-configure-jsx-with-typescript.md"};function o(h,i,p,l,r,c){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="jsx-engine" tabindex="-1">JSX Engine <a class="header-anchor" href="#jsx-engine" aria-label="Permalink to &quot;JSX Engine&quot;">​</a></h1><p>Fourtwo uses a specialized jsx engine to declare and generate IaC resources.</p><p>To use the available components, Javascript must be configured to use the Fourtwo jsx definitions.</p><h1 id="configuring-jsx-with-pragma-directive" tabindex="-1">Configuring JSX with pragma directive <a class="header-anchor" href="#configuring-jsx-with-pragma-directive" aria-label="Permalink to &quot;Configuring JSX with pragma directive&quot;">​</a></h1><p>Pragma comments are used as &#39;hints&#39; to the javascript interpreter about the source code.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@jsxRuntime</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> automatic */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@jsxImportSource</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> @levicape/fourtwo */</span></span></code></pre></div><p><em>Note: the pragma comment only affects the current file.</em></p><h1 id="configuring-jsx-with-tsconfig-json" tabindex="-1">Configuring JSX with tsconfig.json <a class="header-anchor" href="#configuring-jsx-with-tsconfig-json" aria-label="Permalink to &quot;Configuring JSX with tsconfig.json&quot;">​</a></h1><p>The typescript language server can be configured to use a custom JSX engine. By specifying the JSX definition in <code>tsconfig.json</code>, <code>tsc</code> will automatically infer Fourtwo types for <code>.tsx/.jsx</code> files in that project.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;jsxImportSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@levicape/fourtwo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ESNext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;moduleResolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundler&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)]))}const d=s(n,[["render",o]]);export{g as __pageData,d as default};
